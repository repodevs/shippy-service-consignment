package main

import (
	"context"
	"log"
	"net"
	"sync"

	pb "github.com/repodevs/shippy-service-consignment/proto/consignment"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

const (
	port = ":50051"
)

type repository interface {
	Create(*pb.Consignment) (*pb.Consignment, error) 
}

// service defined all method thas generated by protobuff
type service struct {
	repo repository
}

// Repository - Dummy repository for datastore
// replace with real implementation later on.
type Repository struct {
	mu						sync.RWMutex
	consignments	[]*pb.Consignment
}

// Create a new consignment
func (repo *Repository) Create(cm *pb.Consignment) (*pb.Consignment, error) {
	repo.mu.Lock()
	updated := append(repo.consignments, cm)
	repo.consignments = updated
	repo.mu.Unlock()
	return cm, nil
}

// CreateConsignment ...
func (s *service) CreateConsignment(ctx context.Context, req *pb.Consignment) (*pb.Response, error) {
	consignment, err := s.repo.Create(req)
	if err != nil {
		return nil, err
	}

	return &pb.Response{Created: true, Consignment: consignment}, nil
}


func main() {
	repo := &Repository{}

	// Set-up gRPC server
	lis, err := net.Listen("tcp", port)
	if err != nil {
		log.Fatalf("failed to listen %v", port)
	}

	s := grpc.NewServer()

	pb.RegisterShippingServiceServer(s, &service{repo})
	reflection.Register(s)

	log.Println("service running on port:", port)
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to server: %v", err)
	}
}